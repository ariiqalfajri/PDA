# -*- coding: utf-8 -*-
"""Proyek Analisis Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ug4Ox4qIFDSo1koFA0XiNJE-ce12rECy

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** Ariiq Islam Alfajri
- **Email:** m001b4ky0646@bangkit.academy
- **ID Dicoding:** ariiq_islam_alfajri_m001b4ky0646_O9Me

## Menentukan Pertanyaan Bisnis

- Bagaimana perbedaan pola penggunaan sepeda antara hari kerja (workingday), hari libur (holiday), dan hari biasa (weekday)?
- Bagaimana faktor cuaca, suhu & kelembaban, dan: musim memengaruhi jumlah penyewa sepeda?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from datetime import datetime
import streamlit as st


day_df = pd.read_csv("https://raw.githubusercontent.com/ariiqalfajri/PDA/refs/heads/main/Data/day.csv")
day_df.head()

hour_df = pd.read_csv("https://raw.githubusercontent.com/ariiqalfajri/PDA/refs/heads/main/Data/hour.csv")
hour_df.head()

day_df.info()

hour_df.info()

print("Jumlah duplikat data day: ", day_df.duplicated().sum())

print("Jumlah duplikat data hour: ", hour_df.duplicated().sum())


day_df.describe()

hour_df.describe()

#merubah tipe data
hour_df['dteday'] = pd.to_datetime(hour_df['dteday'])
day_df['dteday'] = pd.to_datetime(day_df['dteday'])


#cek lagi
day_df.info()

day_df.describe(include="all")

hour_df.describe(include="all")

#mengelompokkan penyewa sepeda berdasarkan holiday/tidak
grouped_by_holiday = day_df.groupby('holiday')

#perhitungan agregat berdasarkan holiday/tidak
aggregated_stats_by_holiday = grouped_by_holiday['cnt'].agg(['max', 'min', 'mean', 'sum'])

#mengelompokkan penyewa sepeda berdasarkan weekday/tidak
grouped_by_weekday = day_df.groupby('weekday')

#perhitungan agregat berdasarkan weekday/tidak
aggregated_stats_by_weekday = grouped_by_weekday['cnt'].agg(['max', 'min', 'mean'])

#mengelompokkan penyewa sepeda berdasarkan workingday/tidak
grouped_by_workingday = day_df.groupby('workingday')

#perhitungan agregat berdasarkan workingday/tidak
aggregated_stats_by_workingday = grouped_by_workingday['cnt'].agg(['max', 'min', 'mean'])

#mengelompokkan penyewa sepeda berdasarkan cuaca
grouped_by_weather = day_df.groupby('weathersit')

#perhitungan agregat berdasarkan cuaca
aggregated_stats_by_weather = grouped_by_weather['cnt'].agg(['max', 'min', 'mean', 'sum'])

#mengelompokkan penyewa sepeda berdasarkan musim
grouped_by_season = day_df.groupby('season')

#perhitungan agregat berdasarkan musim
aggregated_stats_by_season = grouped_by_season.agg({
    'casual': 'mean',
    'registered': 'mean',
    'cnt': ['max', 'min', 'mean']
})

#mengelompokkan penyewa sepeda berdasarkan musim dan menghitung agregat berdasarkan suhu dan kelembabannya
aggregated_stats_by_season = day_df.groupby('season').agg({
    'temp': ['max', 'min', 'mean'],
    'atemp': ['max', 'min', 'mean'],
    'hum': ['max', 'min', 'mean']
})

st.title("ðŸš² Bike Sharing Dashboard by Ariiq")
st.markdown("##")

#VISUALISASI
# Plot for working day
fig1 = px.box(day_df, x='workingday', y='cnt', color='workingday',
              title='Bike Rental Clusters by Working Day',
              labels={'workingday': 'Working Day', 'cnt': 'Total Rentals'},
              color_discrete_sequence=['#00FFFF', '#FF00FF', '#FFFF00', '#00FF00', '#FF0000'])
fig1.update_xaxes(title_text='Working Day')
fig1.update_yaxes(title_text='Total Rentals')

# Plot for holiday
fig2 = px.box(day_df, x='holiday', y='cnt', color='holiday',
              title='Bike Rental Clusters by Holiday',
              labels={'holiday': 'Holiday', 'cnt': 'Total Rentals'},
              color_discrete_sequence=['#00FFFF', '#FF00FF', '#FFFF00', '#00FF00', '#FF0000'])
fig2.update_xaxes(title_text='Holiday')
fig2.update_yaxes(title_text='Total Rentals')

# Plot for weekday
fig3 = px.box(day_df, x='weekday', y='cnt', color='weekday',
              title='Bike Rental Clusters by Weekday',
              labels={'weekday': 'Weekday', 'cnt': 'Total Rentals'},
              color_discrete_sequence=['#00FFFF', '#FF00FF', '#FFFF00', '#00FF00', '#FF0000'])
fig3.update_xaxes(title_text='Weekday')
fig3.update_yaxes(title_text='Total Rentals')

# Displaying the plots
st.plotly_chart(fig1, use_container_width=True)
st.plotly_chart(fig2, use_container_width=True)
st.plotly_chart(fig3, use_container_width=True)

#question 2
fig = px.box(day_df, x='weathersit', y='cnt', color='weathersit',
             title='Bike Users Distribution Based on Weather Condition',
             labels={'weathersit': 'Weather Condition', 'cnt': 'Total Rentals'})

st.plotly_chart(fig, use_container_width=True)

# Creating a scatter plot
fig = px.scatter(day_df, x='temp', y='cnt', color='season',
                 title='Bike Rental Clusters by Season and Temperature',
                 labels={'temp': 'Temperature (Â°C)', 'cnt': 'Total Rentals'},
                 color_discrete_sequence=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'],
                 hover_name='season')

st.plotly_chart(fig, use_container_width=True)

# Creating a scatter plot
fig = px.scatter(day_df, x='hum', y='cnt', color='season',
                 title='Bike Rental Clusters by Season and Humidity',
                 labels={'hum': 'Humidity', 'cnt': 'Total Rentals'},
                 color_discrete_sequence=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'],
                 hover_name='season')

st.plotly_chart(fig, use_container_width=True)

